#
# Created on Wed May 15 2024
#
# The MIT License (MIT)
# Copyright (c) 2024 WaveAI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

"""
A module that contains the Flant5 dataset class.
"""

import json
import os
import typing

import dataset.dataset


class Flant5Dataset(dataset.dataset.LyricsDataset):
    """A class that represents the dataset that will be generated by the Flant5 model.

    Args:
        dataset (dataset.dataset.LyricsDataset): The dataset class from the dataset module.
    """

    def __init__(
        self,
        paths: typing.Union[str, typing.List[str]],
        json_path: str = "./data/lyrics.json",
    ) -> None:
        if isinstance(paths, str):
            paths = [paths]

        self._json_path = json_path
        self._paths = paths

        self._construct_json()
        super().__init__(json_path)

    def _construct_json(self) -> None:
        """
        Function that constructs the JSON file with the lyrics to be used in the dataset.
        """

        data = {}

        idx = 0
        for path in self._paths:
            for file in os.listdir(path):
                if file.endswith(".txt"):
                    with open(os.path.join(path, file), "r", encoding="utf-8") as f:
                        data[idx] = f.read()
                        idx += 1

        with open(self._json_path, "w", encoding="utf-8") as f:
            json.dump(data, f)

    def generate_dataset(self) -> None:
        """
        Function that generates the dataset.
        """
        raise NotImplementedError("generate_dataset method not implemented.")
